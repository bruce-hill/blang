prog: ^^__Block__ [ParseError:: +(./\n) @message=(""=>"Invalid code")]$$

term: (
    Bool / String / Float / Int / unaryOp / Var !`( / FnCall / Func / List / `(__extended-expr__`)
)
IndexedTerm:: term `@ term
expr: Mod / Add / Sub / Mul / Div / Pow / IndexedTerm / term
extended-expr: And / Or / Xor / comparison / expr
unaryOp: Negative / Len
Negative:: `- !`0-9,-,. term
Len:: `# term
Mod:: (Add / Sub / Mul / Div / Pow / term) _ \b"mod"\b _ (Add / Sub / Mul / Div / Pow / term)
Add:: (Add / Sub / Mul / Div / Pow / term) _ `+ _ (Mul / Div / Pow / term)
Sub:: (Add / Sub / Mul / Div / Pow / term) _ `- _ (Mul / Div / Pow / term)
Mul:: (Mul / Div / Pow / term) _ `* _ (Pow / term)
Div:: (Mul / Div / Pow / term) _ `/ _ (Pow / term)
Pow:: @base=term _ `^ _ @exponent=term
And:: 2+(comparison / expr) % (__\b"and"\b__)
Or:: 2+(comparison / expr) % (__\b"or"\b__)
Xor:: 2+(comparison / expr) % (__\b"xor"\b__)
Less:: expr _ "<" _ expr
LessEq:: expr _ "<=" _ expr
Greater:: expr _ ">" _ expr
GreaterEq:: expr _ ">=" _ expr
Equal:: expr _ "==" _ expr
NotEqual:: expr _ "!=" _ expr
comparison: Equal / NotEqual / LessEq / Less / GreaterEq / Greater
Bool:: \b("yes"/"no")\b
String:: `" ..%(Escape / `$ (Var/`(__ extended-expr __`))) `"
List:: `[__*extended-expr %(__`,__) __ [`,__] `] [_`:_@type=Type]
Escape:: `\ (`x 2 hex / `a,b,t,n,r,v / 3 `0-8 / .)
Float:: [`-,+] (`0-9 *`0-9,_ `. *`0-9 / `. +`0-9)
Int:: [`-,+] `0-9 *`0-9,_
FnCall:: @fn=(FnCall / Var / `(__expr__`)) `( __ @args=(*expr % (__`,__)) __ [`,__] `) [_`:_@type=Type]
Var:: id !~ keyword
id: \b(\I *\i)
Block:: @curdent=\C +(comment/statement) % (+\n curdent !(` /\t))
statement: (Declaration / FnDecl / Assignment / AddUpdate / SubUpdate
  / MulUpdate / DivUpdate / AndUpdate / OrUpdate / XorUpdate
  / If / For / While / Return / FnCall
  / !$ (ParseError:: ..$ @message=(=>"Invalid statement")))
Declaration:: @var=Var _`: _[@type=Type_] `= _ @value=expr
FnDecl:: @curdent=\C (@name=Var _
  `( __ @args=*@(@arg=var_`:_@type=Type)%(__`,__)__[`,__]`)_`:_[@return=Type]_ `= _ funcBody)
Func:: @curdent=\C (`(__*@args=(@arg=var__`:__@type=Type)%(__`,__)__[`,__]`)_[`:_@return=Type]_"->" funcBody)
funcBody: @expr=extended-expr / +\n curdent +(` /\t) @body=Block
Assignment:: Var _ `= _ required-expr
AddUpdate:: Var _ "+=" _ required-expr
SubUpdate:: Var _ "-=" _ required-expr
MulUpdate:: Var _ "*=" _ required-expr
DivUpdate:: Var _ "/=" _ required-expr
AndUpdate:: Var _ "and=" _ required-expr
OrUpdate:: Var _ "or=" _ required-expr
XorUpdate:: Var _ "xor=" _ required-expr
required-expr: expr / (ParseError:: ..$ @message=(=>"Invalid expression"))
Type:: "Bool" / "Int" / "Float" / "String" / `[Type`] / `(__ @args=(*Type % (__`,__)) __ `) _ "->" __ Type
If:: \b"if"\b @curdent=\C _ (
    @(@condition=extended-expr +\n curdent +(` /\t) @body=Block)
    *@(+\n curdent \b"elseif"\b _ @condition=extended-expr +\n curdent +(` /\t) @body=Block)
    [+\n curdent \b"else"\b +\n curdent +(` /\t) @elseBody=Block]
)
For:: \b"for"\b @curdent=\C _ @var=Var _ "in" _ @iterable=(range / expr) +\n curdent +(` /\t) @body=Block
While:: \b"while"\b _ @condition=extended-expr +\n curdent +(` /\t) @body=Block
Return:: \b"return"\b _ [expr]
Range:: expr _ [`,_expr]_".."_expr # 1,2..4  x..y  1..#list
comment: "//" *.


keyword: \b("yes"/"no"/"for"/"while"/"if"/"elseif"/"else"/"with")\b
hex: `0-9,a-f,A-F
__: *(` /\t/\n/\r/comment)
_:  *(` /\t)
