prog: ^^__Block__ [ParseError:: +(./\n) @message=(""=>"Invalid code")]$$

term: (
    Bool / Nil / String / Float / Int / unaryOp / Var !(_`(,{) / Struct / FnCall / Lambda / Range / List / `(__extended-expr__`)
)
IndexedTerm:: !`0-9 (IndexedTerm / term) `. (Int / term)
expr: Mod / Add / Sub / Mul / Div / Pow / IndexedTerm / term
extended-expr: And / Or / Xor / comparison / expr
unaryOp: Negative / Len
Negative:: `- !`0-9,-,. term
Len:: `# term
Mod:: (Add / Sub / Mul / Div / Pow / term) _ \b"mod"\b _ (Add / Sub / Mul / Div / Pow / term)
Add:: (Add / Sub / Mul / Div / Pow / term) _ `+ _ (Mul / Div / Pow / term)
Sub:: (Add / Sub / Mul / Div / Pow / term) _ `- _ (Mul / Div / Pow / term)
Mul:: (Mul / Div / Pow / term) _ `* _ (Pow / term)
Div:: (Mul / Div / Pow / term) _ `/ _ (Pow / term)
Pow:: @base=term _ `^ _ @exponent=term
And:: 2+(comparison / expr) % (__\b"and"\b__)
Or:: 2+(comparison / expr) % (__\b"or"\b__)
Xor:: 2+(comparison / expr) % (__\b"xor"\b__)
Less:: expr _ "<" _ expr
LessEq:: expr _ "<=" _ expr
Greater:: expr _ ">" _ expr
GreaterEq:: expr _ ">=" _ expr
Equal:: expr _ "==" _ expr
NotEqual:: expr _ "!=" _ expr
comparison: Equal / NotEqual / LessEq / Less / GreaterEq / Greater
Bool:: \b("yes"/"no")\b
Nil:: \b"nil"\b
String:: `" ..%(Escape / `$ (Var/`(__ extended-expr __`))) `"
List:: `[__*extended-expr %(__`,__) __ [`,__] `] [_`:_@type=type]
Escape:: `\ (`x 2 hex / `a,b,t,n,r,v / 3 `0-8 / .)
Float:: [`-,+] (`0-9 *`0-9,_ `. *`0-9 / `. +`0-9)
Int:: [`-,+] `0-9 *`0-9,_
Struct:: @name=Var _ `{ __ *@([@name=Var __`=__] @value=required-extended-expr) % (__`,__) [__`,] __ `}
FnCall:: @fn=(FnCall / Var / `(__expr__`)) `( __ @args=(*expr % (__`,__)) __ [`,__] `) [_`:_@type=type]
Var:: id !~ (^^keyword$$)
id: \b(\I *\i)
Block:: @curdent=\C +(comment/statement) % (+\n curdent !(` /\t))
statement: (Declaration / FnDecl / Assignment / AddUpdate / SubUpdate
  / MulUpdate / DivUpdate / AndUpdate / OrUpdate / XorUpdate
  / If / For / While / Return / FnCall / TypeDeclaration
  / !$ (ParseError:: @dent=\C ..$ *(\n dent (` /\t)..$) @message=(=>"Invalid statement")))
Declaration:: @var=Var _`: _[@type=type_] `= _ @value=required-extended-expr
TypeDeclaration:: @(NamedType::id) _ ":::" _ (type / (ParseError:: ..$ @message=(=>"Not a valid type")))
FnDecl:: @curdent=\C (@name=Var _
  `( __ @args=*@(@arg=Var_`:_@type=type)%(__`,__)__[`,__]`)_`:_[@return=type]_ `= _ @body=funcBody)
Lambda:: (@curdent=\C
  `(__@args=*@(@arg=Var__`:__@type=type)%(__`,__)__[`,__]`)
  [_`:_@return=type]_"->"_
  (@body=funcBody / (ParseError:: @message=(..$ =>"Invalid lambda body")))
)
funcBody: extended-expr / +\n curdent +(` /\t) Block
Assignment:: (IndexedTerm/Var) _ `= _ required-extended-expr
AddUpdate:: Var _ "+=" _ required-extended-expr
SubUpdate:: Var _ "-=" _ required-extended-expr
MulUpdate:: Var _ "*=" _ required-extended-expr
DivUpdate:: Var _ "/=" _ required-extended-expr
AndUpdate:: Var _ "and=" _ required-extended-expr
OrUpdate:: Var _ "or=" _ required-extended-expr
XorUpdate:: Var _ "xor=" _ required-extended-expr
required-extended-expr: extended-expr / (ParseError:: ..$ @message=(=>"Invalid expression"))
type: (
  (StructType:: @name=Var `{__ *@(@name=Var_`:_@type=type) % (__`,__) [__`,] __`})
  / (NamedType::Var) / (ListType::`[type`])
  / (OptionalType:: `? type)
  / (VariantType:: `( 2+ type%`| `))
  / (FnType:: `(__ @args=(*type % (__`,__)) __ `) _ "->" __ @return=type)
)
If:: \b"if"\b @curdent=\C _ (
    @(@condition=extended-expr +\n curdent +(` /\t) @body=Block)
    *@(+\n curdent \b"elseif"\b _ @condition=extended-expr +\n curdent +(` /\t) @body=Block)
    [+\n curdent \b"else"\b +\n curdent +(` /\t) @elseBody=Block]
)
For:: (
  \b"for"\b @curdent=\C _ [@index=Var_`,_] @var=Var _ "in" _ @iterable=required-extended-expr
  +\n curdent +(` /\t) @body=Block
  [+\n curdent \b"between"\b +\n curdent +(` /\t) @between=Block]
)
While:: (
  \b"while"\b _ @condition=extended-expr
  +\n curdent +(` /\t) @body=Block
  [+\n curdent \b"between"\b +\n curdent +(` /\t) @between=Block]
)
Return:: \b"return"\b _ [expr]
Range:: `[__@first=(Int/!Float extended-expr) __ [`,__@next=(Int/ !Float required-extended-expr)]__".."__@last=(Int/!Float required-extended-expr)__`] # [0,2..4] [x..y] [1..#list]
comment: "//" *.


keyword: "nil"/"yes"/"no"/"for"/"while"/"between"/"if"/"elseif"/"else"/"with"
hex: `0-9,a-f,A-F
__: *(` /\t/\n/\r/comment)
_:  *(` /\t)
