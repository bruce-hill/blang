struct Vec {
    x:Num
    y:Num
}
// or: struct Vec{x:Num,y:Num}

def add(a:Vec, b:Vec):= Vec{a.x+b.x, a.y+b.y}
def multiply(a:Vec, b:Vec):= a.x*b.x + a.y*b.y
def multiply(k:Num, v:Vec):= Vec{k*v.x, k*v.y}
def multiply(v:Vec, k:Num):= Vec{k*v.x, k*v.y}
def tostring(v:Vec):String = "Vec<$(v.x),$(v.y)>"

v := Vec{2.3, 4.5}
$puts "v = $v"
$puts "v.x = $(v.x)"
$puts "v + v = $(v + v)"
$puts "100. * v = $(100. * v)"
$puts "v * v = $(v * v)"
butwith := v & .x=999.999
$puts "v&.x=999.999 = $butwith"

// Anonymous structs (tuples)
x := Tuple{1, 2.3, "hello"}
$puts "Tuple: $x"
x &= [2]=5.5
$puts "Tuple: $x"

// Return values
def foo(n:Int):
    if n > 0
        return {.ok=yes, .msg="Can be used for multi-returns"}
    else
        return {.ok=no, .msg="Uh oh"}

result := foo(4)
if result.ok
    $puts result.msg

$puts "Equality: $(Vec{1,1} == Vec{1,1})"

// Recursive struct
struct Tree {
    value:Int
    left,right:Tree?
}

t := Tree{5, Tree{0, nil, nil}, nil}
t.right = t
$puts "Recursive struct with cyclical references: $t"
