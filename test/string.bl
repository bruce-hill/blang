Vec ::: Vec{x:Num,y:Num}

i := 5
f := 3.14159
s := "world"
v := Vec{2.3, 4.5}
l := [[1,2],[3,4]]
l2 := [[Vec{2.,3.}]]


// String operators
def add(a:String,b:String):String = $bl_string_append_string(a, b):String
def multiply(s:String,i:Int):String = $bl_string_repeat(s, i):String
def multiply(i:Int,s:String):String = $bl_string_repeat(s, i):String

$puts("Hello: i=$i f=$f s=$s v=$v l=$l l2=$l2 expr=$(i + 1)!")
$puts("\n<-newline \x21<-bang \101<-A, backslash: \\ quote: \" done")
$puts("Fn: $( (x:Int,y:Int)=> x + y )")

toslice := "Hello world"
char := toslice[1]
slice := toslice[2..6]
$puts("Char: $char Slice: $slice")
$puts("Invalid char: $(toslice[-10]) Invalid slice: '$(toslice[-100..-5])'")
$puts("First slice: '$(toslice[..5])' Backwards: '$(toslice[-(1..)])'")
$puts("Whole slice: '$(toslice[..])' Every other: '$(toslice[1,3..])'")

$puts("string" + " + " + "concatenation")
$puts("string * repeating: $(5 * "Ha")")

if yes
    multiline := """
        Hello world
            (indented x4 here)
        i is $i escape: \x41


        ^^^^ 2x blank line ^^^^^^
        expression: $(1 + 2)
        the end (no trailing newline)
    """
    $puts("Multliline:\n<START>$multiline<END>")
