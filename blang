#!/usr/bin/env moon
util = require 'util'
import log, viz, set_file from util

number_code = (code, color="1")->
    line = 0
    (code\gsub("\n$","")\gsub "[^\n]*", =>
        line += 1
        "\x1b[2m#{("% 4d")\format line}|\x1b[22m \x1b[#{color}m#{@}\x1b[m"
    )

verbose = false
compile = false
files, args = {}, {}
for i,a in ipairs arg
    if a == "-v" or a == "--verbose"
        verbose = true
    elseif a == "-c" or a == "--compile"
        compile = true
    elseif a == "--"
        args = {table.unpack(arg, i+1, #arg)}
        break
    else
        table.insert files, a

unless verbose
    log = ->
    util.log = log

parse = require 'parse'
import compile_prog from require 'compile'

mktemp = (suffix)-> io.popen("mktemp --suffix=#{suffix} /tmp/blang.XXXXXX")\read("l")

run_file = (filename, file, temporary=true)->
    log "\x1b[1;4mFile #{filename}\x1b[m"
    with file
        text = \read "*a"
        set_file "stdin", text
        log number_code(text, "34;1")
        ast = parse text, filename
        assert ast, "No match!"
        -- log "#{viz ast}"

        code = compile_prog ast, filename

        log number_code(code, "36;1")

        qbe_file,asm_file,bin_file = if temporary
            mktemp(".qbe"), mktemp(".s"), mktemp(".o")
        else
            filename..".qbe", filename..".s", filename..".o"

        with io.open qbe_file, "w"
            \write code
            \close!

        run = (cmd)->
            log "> \x1b[1m#{cmd}\x1b[m"
            assert os.execute cmd

        log "\x1b[2mRunning QBE...\x1b[m"
        run "qbe #{qbe_file} > #{asm_file}"
        log "\x1b[2mCompiling assembly...\x1b[m"
        run "cc #{asm_file} lib/*.o -ggdb -o #{bin_file} -lm -lbhash"

        if compile
            print "Compiled to #{bin_file}"
        else
            log "\x1b[2mRunning program:\x1b[m"
            exec_path = bin_file\match("^/") and bin_file or "./"..bin_file
            run "#{exec_path} #{table.concat args, " "}"
            os.execute "rm -f \"#{qbe_file}\" \"#{asm_file}\" \"#{bin_file}\""

        \close! unless file == io.stdin

if #files == 0
    run_file "stdin", io.stdin, true

for filename in *files
    run_file filename, assert(io.open(filename), "Couldn't open file: #{filename}"), not compile
